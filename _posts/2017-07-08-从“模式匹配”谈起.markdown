---
layout: post
title:    "从“模式匹配”谈起"
date:    2017-07-08 21:56:31 +0800
categories:    思考
comments: true
tag: 思考
---

* content
{:toc}

几天前看到了王垠的一片博文——[如何掌握所有的程序语言](http://www.yinwang.org/blog-cn/2017/07/06/master-pl)。于是我想起了了解的一个“模式匹配”的概念。

比如有一个字符串“Hello world”，很容易认识到这是一个“你好，世界”的英文。那么如果我按照下面这样写会怎么样呢？

> Holle world

恩恩，依然认得出来，不过是有两个字母错位而已，如果我再改一改会怎么样？

> Hoole world
> Hoole woeld

如果不仔细看的话，勉强能够认识出是一个Hello world。我很好奇，为什么会这样？要不再改改？

> Hooee uored

个人感觉，我没有从这个字符串联想到 Hello world。

我觉得这其实是很奇怪的，为什么人能够识别出 Hello world？为什么出现个别拼错的字母依然能识别出 Hello world？为什么最后一个字符我没有识别出来？

其实这涉及到一个“模式匹配”的问题。人识别这个 Hello world 的时候并不是依据一个一个字母来识别的，而是依据 Hello world 的某些“模式”来识别的，比如这样：

> H * * l *  w * * l d

星花代表任意字符，其余的字符相当于一个模板，人只要在字符中看到了类似的模板，就可以很大程度上认定这是一个 Hello world 的字符。

这就是“模板匹配”，上面的模板只是众多模板中的其中一个，其实你可以写很多个。

往深层次想一想，我觉得这个“模板匹配”其实就是提取事物共性的一种行为，你可以写出很多种不同的带有少量错别字的 Hello world，但是你总可以将它识别出来，这是因为人们大脑已经从 Hello world 里提取出了 H * * l *  w * * l d 这样一个“模板”，只要能和这个“模板”相匹配的字符串，就证明有相同的共性，人们就会识别出这个 Hello world。

而王垠的博客里面其实也暗含了这个“模板匹配”这个概念。比如王垠提到了以下几个概念：

* 变量定义
* 算术运算
* for 循环语句，while 循环语句
* 函数定义，函数调用
* 递归
* 静态类型系统
* 类型推导
* lambda 函数
* 面向对象
* 垃圾回收
* 指针算术
* goto 语句

其实细想一下，王垠提到的几个特性其实都是程序设计语言里面的“共性”。

我们可以把“**程序设计语言**”比喻成面向对象思想中的“**接口**”。像什么“变量定义”、“算数运算”、“函数定义”之类的看做是“**接口**"里面定义的方法。而Java、C/C++、Kotlin只不过是针对“**程序设计语言**”这个接口的一个实现。而我们知道接口的实现是有很多种的，所以才会有众多的程序设计语言。但是我们也意识到，正是因为有了**程序设计语言**这个接口，纵然有许多不同的实现，可这些实现只不过是为了达到某一个目的的不同的方式而已。

所以说"**程序设计语言**"就是不同语言的一个共性，也可以理解成为一个“模板”，只要你的语言是基于“**程序设计语言**"这个接口，那么这门语言就逃不脱上述的那些”共性“。只要我们脑海里对这些”共性“——或者说是”模板“——有了清晰的理解，那么从某种意义层面上，的确可以说我们掌握了大多数程序设计语言。这就好比有了 “H * * l *  w * * l d”这个模板，我们就可以识别各种各样带错字的“hello world”。

其实不仅仅限于程序设计语言，计算机科学的很多地方都涉及到了这个理念，这也是为什么一直强调要注重基础知识的学习，因为这些基础知识就是所谓的“**模板**”，各种花花绿绿的技术其实都是建立在这个“**模板**”之上。而作为一名计算机专业的学生，认识到这一点是非常重要的。
