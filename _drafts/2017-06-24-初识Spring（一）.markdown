---
layout: post
title:    "初识Spring（一）"
date:    2017-06-24 23:26:34 +0800
categories:    Spring
comments: true
---

* content
{:toc}

Spring简介
==
作为一个Java框架，Spring的根本使命就是简化Java开发。主要是让Java开发变得更加简单，更加具有可测试性，更加的松耦合。然而，Spring实现以上功能的仅仅只是基于少许的基本理念，比如说：松耦合、可重用等等。为了实现简化Java开发的使命，Spring采取了几种基本策略，如下。


Spring采用的几种基本策略
==
* 基于对象的轻量级和最小侵入性
非侵入性编程，通俗点说就是某一个类在使用了框架和不使用框架的情况下都能够发挥相同的作用。用Struts2框架举个例子。
```
public class HelloAction extends ActionSupport {
	public String execute() {
		return "Hello world!";
	}
}
```
在这个例子中如果想让`HelloAction`能够正常的工作，必须要继承`ActionSupport`，这就意味着`HelloAction`和Struts2框架死死的绑定在了一起。这就是侵入式，从字面意思理解就是Struts2“侵入了“`HelloAction`这个对象。这样带来了两个个问题：1、如果`HelloAction`的功能需要被另一个模块重用，那么目标模块就不得不导入Struts框架，否则`HelloAction`就无法工作，这样就加大了项目的代码冗余。2、倘若决定不采用Struts2框架，那么这个`HelloAction`将无法发挥它的正常功能，内部的逻辑代码必须要重写。所以，以上两点就降低了代码的可重用度。
* 通过依赖注入（Dependency injection）和面向接口实现松耦合

* 基于切面（aspect-oriented programming）和惯例进行声明式编程
    
* 通过切面和模板减少样板式代码
